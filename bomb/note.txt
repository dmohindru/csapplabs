-------------PHASE 1------------------------
Call Address    : 400e3a
Start Address   : 400ee0
Paramater 1     : %rdi
Paramater 2     : %esi
Phase 1 String  : 0x402400
Possible code for phase 1
phase_1(char *input_str)
{
  char *phase1_str = 0x0x402400
  if(strings_not_equal(input_str, phase1_str))
  {
    explode_bomb();
    return;
  }
  printf("Phase 1 defused. How about the next one?\n")
}
-------------------------------------------
-------------PHASE 2------------------------
Call Address    : 400e56
Start Address   : 400efc
Paramater 1     : %rdi (input string)
read_six_numbers reading six integer numbers and store at address
%rsp      = number 1
%rsp + 4  = number 2
%rsp + 8  = number 3
%rsp + 12 = number 4
%rsp + 16 = number 5
%rsp + 20 = number 6
%rsp + 24 = As end condition
Possible numbers at address
%rsp      = 1
for %rsp + 4
%rbx = %rsp + 4
let a = (%rbx)
%eax = a - 4
%eax = %eax + %eax = a - 4 + a - 4 = 2a - 8
a = 2a - 8 (equation for number to be correct)
solving for a
1a - 8 = 0
a = 8
so possibly number is
1 2 4 8 16 32
i_next = (i_prev) * 2
 
-------------------------------------------
-------------PHASE 3------------------------
Call Address    : 400e72
Start Address   : 400f43
Paramater 1     : %rdi (input string)
here we call sscanf function with
1st parameter %rdi: input string by user
2nd parameter %rsi: memory address 0x4025cf which probably contains pointer to format string
3rd parameter %rdx: which is a pointer to memory location %rsp+8
4th parameter %rcx: which is a pointer to memory location %rsp+12
so basically this sscanf is try to read two integer (signed or unsigned) (4 bytes)
and store these number at memory location %rsp+8, %rsp+12
number combos
0   207
1   311
2   707
3   256
4   389
5   206
6   682
7   327
--------------------------------------------
-------------PHASE 4------------------------
Call Address    : 400e8e
Start Address   : 40100c
Paramater 1     : %rdi (input string)
This phase read two integers 
first integer as unsigned should less than or equal to 14
second integer value unknown and type(unsigned or signed)
func4 is called as func4(first_inteter, 0, 14)
return value of func4 should be zero and second_integer should be zero, else bomb explodes
Possible code for func4
int func4(first_arg, second_arg, third_arg)
{
//first_arg in %rdi
//second_arg in %rsi
//third_arg in %rdx
  int ret_val = third_arg;
  ret_val -= second_arg;
  int new_val = ret_val;
  new_val = new_val >> 31;
  ret_val += new_val;
  ret_val = ret_val >> 1;
  new_val = ret_val + (second_arg * 1);
  if(new_val>second_arg)
  {
    third_arg = new_val - 1;
    int new_ret_val = func4(first_arg, second_arg, third_arg)
    return new_ret_val * 2;
    
  }
  else
  {
    ret_val = 0;
    if(new_val<second_arg)
    {
      return ret_val;
    }
    else
    {
      second_arg = new_val + 1;
      int new_ret_val = func4(first_arg, second_arg, third_arg);
      return  (2 * new_ret_val)  + 1;
    }
  }
}
Solution to this phase
0 0
1 0
3 0
7 0
as function func4 return 0 for following value of first_arg
0, 1, 3, 7
--------------------------------------------
-------------PHASE 5------------------------
Call Address    : 400eaa
Start Address   : 401062
Paramater 1     : %rdi (input string)
First check this phase does is to check if string length is 6 (not including carriage return)
main login to decipher between
40108b - 4010ac as it contains some kind of string generation
line between
4010b3 - 4010c6 contain logic for equality between two strings
Logic for line between 40108b - 4010ac
Loop repeated 6 times (initally %eax = 0) and (%eax <6)
1. move character pointed by index value in %eax of input_string to %ecx; 
2. move byte in %cl to mem location %rsp
3. move value from mem location %rsp to %rdx
4. preserve last 4 bits of %rdx with operation and ($0xf, %rdx)
5. move zero extended byte at address 0x4024b0+%rdx to %edx, %edx=(0x4024b0+%rdx)
6. move byte val of %dl to memory locaton (16+%rsp+%rax*1)
7. increment %eax by one

Points of observation
1. value of %fs:0x28 in %rax at address 40106a set break point at 401071 : 0x6038c0
2. value stored at mem address 0x4024b0 set break point at 4010a0 (not really required)
0x4024b0 <array.3449>:	109(m)	  97(a)	  100(d)	  117(u)	  105(i)	  101(e)	  114(r)	  115(s)
0x4024b8 <array.3449+8>:110(n)	102(f)    111(o)	  116(t)	  118(v)	  98(b)	    121(y)    108(l)
3. string stored at address $0x40245e set break point at 4010b3  (not really required)
"\276^$@"
TEST run
input string: dhruv1
(16+%rsp+%rax*1) = (d:100)105 (h:104)110 (r:114)100 (u:117)101 (v:118)114 (1:49)97
Right answer string ascii code
102(f)   108(l)   121(y)   101(e)   114(r)   115(s)   0(null)  ---> "flyers"
answer should be
1 char index(102:f): 9      1001        I  
2 char index(108:l): 15     1111        O
3 char index(121:y): 14     1110        N
4 char index(101:e): 5      0101        E  
5 char index(114:r): 6      0110        F
6 char index(115:s): 7      0111        G

Solution to phase 5
"IONEFG"
--------------------------------------------
-------------PHASE 6------------------------
Call Address    : 400ec6
Start Address   : 4010f4
Paramater 1     : %rdi (input string)

1. This function start with saving few register on stack (%r14,%r13,%r12,%rbp,%rbx) on stack and allocating
80 bytes on stack. [0x4010f4-0x4010fc]
2. It save %rsp (top of stack) to %r13 (logic unclear as of now) [0x401100]
3. Calls read_six_number with first argument in %rdi (input string) and 
second argument in %rsi (pointer to array of number) [0x401106]
4. After call to read_six_number. checks for the first number inputed at address %rsp 
to be less than 6 (unsigned) [0x401117-0x401121], else explodes bomb.
5. It then check for other five numbers inputed for not equal to first number entered. If any of other number
inputed is equal to first number bomb is exploded. [0x401128-0x40114b]
6. After completing above check in loop it computes address %r13=%rsp+4. Basically next element in array of integers.
Then it move the content of %r13 to %rsp. Checks for this fifth element to be less than 6 (unsigned).

7. line between[0x401114-0x401151] contains two nested loop

read_six_number(input_string, int_array)

i=0
array_pos = int_array
while(i<6)
{
  int *pos = array_pos;
  int number = *array_pos;
  if(number > 5)
    explode_bomb
  i++;
  j=i;
  while(j<=5)
  {
    if(*pos == array_pos[j])
      explode_bomb
    j++
  }
  int_array++
    
}

from above code we can deduce that all six number entered should be less than six and none of them should be same.
Verify above hypothisis by running a debugger with following input
0 1 2 3 4 5
5 4 3 2 1 0
5 5 3 2 1 0
--------------------------------------------
