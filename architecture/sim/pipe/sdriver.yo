                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq 	%rax,%rax		# count = 0;
0x034: 6222                 | 	andq 	%rdx,%rdx		# len <= 0?
0x036: 714c01000000000000   | 	jle 	Done			# if so, goto Done:
0x03f: 2029                 | 	rrmovq	%rdx, %r9		# setup up limit
0x041: c0f9ffffffffffffffff | 	iaddq	$-1, %r9		# limit = len - K + 1 , K = 2
0x04b: 30f80000000000000000 | 	irmovq	$0, %r8			# set up i
0x055: 70e200000000000000   | 	jmp		Loop_Check:
                            | 	
                            | ############Basic Computations#########################
0x05e:                      | Loop:	
0x05e: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x068: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x072: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x074: 718700000000000000   | 	jle 	Npos										# if so, goto Npos:
0x07d: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x087:                      | Npos:	
0x087: c0f70800000000000000 | 	iaddq	$8, %rdi
0x091: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | 	
                            | # Unrolling loop - 2
0x09b: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x0a5: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x0af: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x0b1: 71c400000000000000   | 	jle 	Npos1										# if so, goto Npos:
0x0ba: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x0c4:                      | Npos1:
0x0c4: c0f70800000000000000 | 	iaddq	$8, %rdi
0x0ce: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | ############Basic Computations#########################
0x0d8: c0f80200000000000000 | 	iaddq	$2, %r8
                            | 
0x0e2:                      | Loop_Check:	
0x0e2: 209b                 | 	rrmovq	%r9, %r11		# %r11 for temprory calculation
0x0e4: 618b                 | 	subq	%r8, %r11		# check for i < limit
0x0e6: 755e00000000000000   | 	jge		Loop:		# if i < limit jump to loop
0x0ef: 703f01000000000000   | 	jmp		Final_Loop_Check
                            | 
0x0f8:                      | Final_Loop:
0x0f8: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x102: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x10c: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x10e: 712101000000000000   | 	jle 	Final_Loop_Npos										# if so, goto Npos:
0x117: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x121:                      | Final_Loop_Npos:	
0x121: c0f70800000000000000 | 	iaddq	$8, %rdi
0x12b: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | 	
0x135: c0f80100000000000000 | 	iaddq	$1, %r8
0x13f:                      | Final_Loop_Check:
0x13f: 2029                 | 	rrmovq	%rdx, %r9
0x141: 6189                 | 	subq	%r8, %r9
0x143: 75f800000000000000   | 	jge		Final_Loop
                            | 
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x14c:                      | Done:
0x14c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x14d:                      | End:
                            | #/* $end ncopy-ys */
0x14d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x150:                      | 	.align 8
0x150:                      | src:
0x150: 0100000000000000     | 	.quad 1
0x158: feffffffffffffff     | 	.quad -2
0x160: 0300000000000000     | 	.quad 3
0x168: fcffffffffffffff     | 	.quad -4
0x170: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x180:                      | 	.align 16
0x180:                      | Predest:
0x180: fadebc0000000000     | 	.quad 0xbcdefa
0x188:                      | dest:
0x188: abefcd0000000000     | 	.quad 0xcdefab
0x190: abefcd0000000000     | 	.quad 0xcdefab
0x198: abefcd0000000000     | 	.quad 0xcdefab
0x1a0: abefcd0000000000     | 	.quad 0xcdefab
0x1a8:                      | Postdest:
0x1a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1b0:                      | .align 8
                            | # Run time stack
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
                            | 
0x230:                      | Stack:
