                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6d801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq 	%rax,%rax		# count = 0;
                            | 	# setup loop 5X1 loop unrolling
0x034: c0f2fbffffffffffffff | 	iaddq	$-5, %rdx		# limit = len - K + 1 , len - (16 - 1)
0x03e: 723b01000000000000   | 	jl		Remain			# if negetive
                            | 	
                            | ############Basic Computations#########################
0x047:                      | Loop:	
0x047: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x051: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x05b: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x05d: 717000000000000000   | 	jle 	Npos										# if so, goto Npos:
0x066: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x070:                      | Npos:	
                            | 	
                            | # Unrolling loop - 2
0x070: 50a70800000000000000 | 	mrmovq 	8(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x07a: 40a60800000000000000 | 	rmmovq 	%r10, 8(%rsi)	# ...and store it to dst	# load forward
0x084: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x086: 719900000000000000   | 	jle 	Npos1										# if so, goto Npos:
0x08f: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x099:                      | Npos1:
                            | 
                            | # Unrolling loop - 3
0x099: 50a71000000000000000 | 	mrmovq 	16(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x0a3: 40a61000000000000000 | 	rmmovq 	%r10, 16(%rsi)	# ...and store it to dst	# load forward
0x0ad: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x0af: 71c200000000000000   | 	jle 	Npos2										# if so, goto Npos:
0x0b8: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x0c2:                      | Npos2:
                            | 
                            | # Unrolling loop - 4
0x0c2: 50a71800000000000000 | 	mrmovq 	24(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x0cc: 40a61800000000000000 | 	rmmovq 	%r10, 24(%rsi)	# ...and store it to dst	# load forward
0x0d6: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x0d8: 71eb00000000000000   | 	jle 	Npos3										# if so, goto Npos:
0x0e1: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x0eb:                      | Npos3:
                            | 
                            | # Unrolling loop - 5
0x0eb: 50a72000000000000000 | 	mrmovq 	32(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x0f5: 40a62000000000000000 | 	rmmovq 	%r10, 32(%rsi)	# ...and store it to dst	# load forward
0x0ff: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x101: 711401000000000000   | 	jle 	Npos4										# if so, goto Npos:
0x10a: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x114:                      | Npos4:
                            | 
                            | ############Basic Computations#########################
0x114: c0f72800000000000000 | 	iaddq	$40, %rdi
0x11e: c0f62800000000000000 | 	iaddq	$40, %rsi
0x128: c0f2fbffffffffffffff | 	iaddq	$-5, %rdx
0x132: 764700000000000000   | 	jg		Loop
                            | 
0x13b:                      | Remain:
0x13b: c0f20500000000000000 | 	iaddq	$5, %rdx
0x145: 739e01000000000000   | 	je		Done
                            | 
0x14e:                      | Final_Loop:
0x14e: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x158: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x162: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x164: 717701000000000000   | 	jle 	Final_Loop_Npos										# if so, goto Npos:
0x16d: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x177:                      | Final_Loop_Npos:	
0x177: c0f70800000000000000 | 	iaddq	$8, %rdi
0x181: c0f60800000000000000 | 	iaddq	$8, %rsi
0x18b: c0f2ffffffffffffffff | 	iaddq	$-1, %rdx
0x195: 764e01000000000000   | 	jg		Final_Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x19e:                      | Done:
0x19e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x19f:                      | End:
                            | #/* $end ncopy-ys */
0x19f:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a0:                      | 	.align 8
0x1a0:                      | src:
0x1a0: ffffffffffffffff     | 	.quad -1
0x1a8: 0200000000000000     | 	.quad 2
0x1b0: 0300000000000000     | 	.quad 3
0x1b8: fcffffffffffffff     | 	.quad -4
0x1c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1d0:                      | 	.align 16
0x1d0:                      | Predest:
0x1d0: fadebc0000000000     | 	.quad 0xbcdefa
0x1d8:                      | dest:
0x1d8: abefcd0000000000     | 	.quad 0xcdefab
0x1e0: abefcd0000000000     | 	.quad 0xcdefab
0x1e8: abefcd0000000000     | 	.quad 0xcdefab
0x1f0: abefcd0000000000     | 	.quad 0xcdefab
0x1f8:                      | Postdest:
0x1f8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x200:                      | .align 8
                            | # Run time stack
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
                            | 
0x280:                      | Stack:
