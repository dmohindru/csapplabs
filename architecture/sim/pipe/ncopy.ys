#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 	%rax,%rax		# count = 0;
	# setup loop 5X1 loop unrolling
	iaddq	$-5, %rdx		# limit = len - K + 1 , len - (16 - 1)
	jl		Remain			# if negetive
	
############Basic Computations#########################
Loop:	
	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Npos										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Npos:	
	
# Unrolling loop - 2
	mrmovq 	8(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, 8(%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Npos1										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Npos1:

# Unrolling loop - 3
	mrmovq 	16(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, 16(%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Npos2										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Npos2:

# Unrolling loop - 4
	mrmovq 	24(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, 24(%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Npos3										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Npos3:

# Unrolling loop - 5
	mrmovq 	32(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, 32(%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Npos4										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Npos4:

############Basic Computations#########################
	iaddq	$40, %rdi
	iaddq	$40, %rsi
	iaddq	$-5, %rdx
	jg		Loop

Remain:
	iaddq	$5, %rdx
	je		Done

Final_Loop:
	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
	andq 	%r10, %r10		# val <= 0?					
	jle 	Final_Loop_Npos										# if so, goto Npos:
	iaddq	$1, %rax		# count++
Final_Loop_Npos:	
	iaddq	$8, %rdi
	iaddq	$8, %rsi
	iaddq	$-1, %rdx
	jg		Final_Loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
