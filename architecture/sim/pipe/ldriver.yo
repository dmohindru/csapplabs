                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f65803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq 	%rax,%rax		# count = 0;
0x034: 6222                 | 	andq 	%rdx,%rdx		# len <= 0?
0x036: 714c01000000000000   | 	jle 	Done			# if so, goto Done:
0x03f: 2029                 | 	rrmovq	%rdx, %r9		# setup up limit
0x041: c0f9ffffffffffffffff | 	iaddq	$-1, %r9		# limit = len - K + 1 , K = 2
0x04b: 30f80000000000000000 | 	irmovq	$0, %r8			# set up i
0x055: 70e200000000000000   | 	jmp		Loop_Check:
                            | 	
                            | ############Basic Computations#########################
0x05e:                      | Loop:	
0x05e: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x068: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x072: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x074: 718700000000000000   | 	jle 	Npos										# if so, goto Npos:
0x07d: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x087:                      | Npos:	
0x087: c0f70800000000000000 | 	iaddq	$8, %rdi
0x091: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | 	
                            | # Unrolling loop - 2
0x09b: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x0a5: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x0af: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x0b1: 71c400000000000000   | 	jle 	Npos1										# if so, goto Npos:
0x0ba: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x0c4:                      | Npos1:
0x0c4: c0f70800000000000000 | 	iaddq	$8, %rdi
0x0ce: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | ############Basic Computations#########################
0x0d8: c0f80200000000000000 | 	iaddq	$2, %r8
                            | 
0x0e2:                      | Loop_Check:	
0x0e2: 209b                 | 	rrmovq	%r9, %r11		# %r11 for temprory calculation
0x0e4: 618b                 | 	subq	%r8, %r11		# check for i < limit
0x0e6: 755e00000000000000   | 	jge		Loop:		# if i < limit jump to loop
0x0ef: 703f01000000000000   | 	jmp		Final_Loop_Check
                            | 
0x0f8:                      | Final_Loop:
0x0f8: 50a70000000000000000 | 	mrmovq 	(%rdi), %r10	# read val from src...		# here we can introduce concept of 
0x102: 40a60000000000000000 | 	rmmovq 	%r10, (%rsi)	# ...and store it to dst	# load forward
0x10c: 62aa                 | 	andq 	%r10, %r10		# val <= 0?					
0x10e: 712101000000000000   | 	jle 	Final_Loop_Npos										# if so, goto Npos:
0x117: c0f00100000000000000 | 	iaddq	$1, %rax		# count++
0x121:                      | Final_Loop_Npos:	
0x121: c0f70800000000000000 | 	iaddq	$8, %rdi
0x12b: c0f60800000000000000 | 	iaddq	$8, %rsi
                            | 	
0x135: c0f80100000000000000 | 	iaddq	$1, %r8
0x13f:                      | Final_Loop_Check:
0x13f: 2029                 | 	rrmovq	%rdx, %r9
0x141: 6189                 | 	subq	%r8, %r9
0x143: 75f800000000000000   | 	jge		Final_Loop
                            | 
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x14c:                      | Done:
0x14c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x14d:                      | End:
                            | #/* $end ncopy-ys */
0x14d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x150:                      | 	.align 8
0x150:                      | src:
0x150: 0100000000000000     | 	.quad 1
0x158: feffffffffffffff     | 	.quad -2
0x160: 0300000000000000     | 	.quad 3
0x168: 0400000000000000     | 	.quad 4
0x170: fbffffffffffffff     | 	.quad -5
0x178: faffffffffffffff     | 	.quad -6
0x180: f9ffffffffffffff     | 	.quad -7
0x188: 0800000000000000     | 	.quad 8
0x190: f7ffffffffffffff     | 	.quad -9
0x198: f6ffffffffffffff     | 	.quad -10
0x1a0: 0b00000000000000     | 	.quad 11
0x1a8: 0c00000000000000     | 	.quad 12
0x1b0: 0d00000000000000     | 	.quad 13
0x1b8: f2ffffffffffffff     | 	.quad -14
0x1c0: 0f00000000000000     | 	.quad 15
0x1c8: 1000000000000000     | 	.quad 16
0x1d0: efffffffffffffff     | 	.quad -17
0x1d8: 1200000000000000     | 	.quad 18
0x1e0: 1300000000000000     | 	.quad 19
0x1e8: 1400000000000000     | 	.quad 20
0x1f0: 1500000000000000     | 	.quad 21
0x1f8: 1600000000000000     | 	.quad 22
0x200: e9ffffffffffffff     | 	.quad -23
0x208: 1800000000000000     | 	.quad 24
0x210: 1900000000000000     | 	.quad 25
0x218: 1a00000000000000     | 	.quad 26
0x220: 1b00000000000000     | 	.quad 27
0x228: e4ffffffffffffff     | 	.quad -28
0x230: 1d00000000000000     | 	.quad 29
0x238: e2ffffffffffffff     | 	.quad -30
0x240: 1f00000000000000     | 	.quad 31
0x248: 2000000000000000     | 	.quad 32
0x250: 2100000000000000     | 	.quad 33
0x258: 2200000000000000     | 	.quad 34
0x260: ddffffffffffffff     | 	.quad -35
0x268: 2400000000000000     | 	.quad 36
0x270: dbffffffffffffff     | 	.quad -37
0x278: daffffffffffffff     | 	.quad -38
0x280: 2700000000000000     | 	.quad 39
0x288: d8ffffffffffffff     | 	.quad -40
0x290: d7ffffffffffffff     | 	.quad -41
0x298: d6ffffffffffffff     | 	.quad -42
0x2a0: 2b00000000000000     | 	.quad 43
0x2a8: 2c00000000000000     | 	.quad 44
0x2b0: 2d00000000000000     | 	.quad 45
0x2b8: d2ffffffffffffff     | 	.quad -46
0x2c0: d1ffffffffffffff     | 	.quad -47
0x2c8: 3000000000000000     | 	.quad 48
0x2d0: 3100000000000000     | 	.quad 49
0x2d8: ceffffffffffffff     | 	.quad -50
0x2e0: 3300000000000000     | 	.quad 51
0x2e8: ccffffffffffffff     | 	.quad -52
0x2f0: cbffffffffffffff     | 	.quad -53
0x2f8: caffffffffffffff     | 	.quad -54
0x300: c9ffffffffffffff     | 	.quad -55
0x308: c8ffffffffffffff     | 	.quad -56
0x310: c7ffffffffffffff     | 	.quad -57
0x318: c6ffffffffffffff     | 	.quad -58
0x320: c5ffffffffffffff     | 	.quad -59
0x328: c4ffffffffffffff     | 	.quad -60
0x330: c3ffffffffffffff     | 	.quad -61
0x338: c2ffffffffffffff     | 	.quad -62
0x340: c1ffffffffffffff     | 	.quad -63
0x348: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x350:                      | 	.align 16
0x350:                      | Predest:
0x350: fadebc0000000000     | 	.quad 0xbcdefa
0x358:                      | dest:
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550:                      | Postdest:
0x550: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x558:                      | .align 8
                            | # Run time stack
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
                            | 
0x5d8:                      | Stack:
